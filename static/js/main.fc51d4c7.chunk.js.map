{"version":3,"sources":["components/AddItemForm.module.css","features/Login/login.module.css","api/todolists-api.ts","utils/errorUtils/errorUtils.ts","features/Login/reducer-auth.ts","app/app-reducer.ts","components/ErrorSnackBar.tsx","components/AppBar.tsx","redux/reducer-todolist.ts","redux/reducer-tasks.ts","components/AddItemForm.tsx","components/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","features/Login/Login.tsx","app/App.tsx","serviceWorker.ts","redux/store.ts","index.tsx","features/TodolistsList/Todolist/Task/task.module.css"],"names":["module","exports","TaskStatuses","TaskPriorities","instance","axios","create","baseURL","withCredentials","headers","authAPI","data","post","get","delete","todolistsAPI","title","id","put","todolistId","taskId","model","handleServerAppError","dispatch","messages","length","setErrorAC","setStatusAC","handleServerNetworkError","error","message","initialState","isLoggedIn","setIsLoggedInAC","value","type","status","isInitialized","Alert","React","forwardRef","props","ref","elevation","variant","CustomizedSnackbars","useSelector","state","app","useDispatch","handleClose","event","reason","Stack","spacing","sx","width","Snackbar","open","autoHideDuration","onClose","severity","ButtonAppBar","Box","flexGrow","AppBar","position","Toolbar","Typography","component","Button","onClick","then","res","resultCode","catch","color","LinearProgress","updateTaskTC","todoId","domainModal","getState","currentTask","tasks","find","t","description","priority","startDate","deadline","updateTaskAC","AddItemForm","memo","disabled","useState","setTitle","setError","addItem","trim","callback","className","classes","container","TextField","label","size","onChange","e","currentTarget","onKeyPress","charCode","helperText","EditableSpan","edit","setEdit","onBlur","autoFocus","onDoubleClick","Task","task","changeTaskTitle","removeTask","changeTaskStatus","changeStatus","useCallback","newIsDoneValue","checked","Completed","New","callbackHandlerSpan","newValue","removeTaskHandler","containerTask","Checkbox","IconButton","iconButtonDelete","fontSize","Todolist","demo","todolist","addTask","changeFilter","changeTodolistTitle","useEffect","items","setTasksAC","setAll","setActive","setCompleted","tasksForTodolist","filter","callbackAddTaskHandler","callbackTitleTodoListHandler","style","display","justifyContent","alignItems","removeTodolist","entityStatus","minHeight","map","elem","marginRight","TodolistsList","auth","stateTodolists","todolists","todos","removeTaskAC","removeTaskTC","action","item","addTaskAC","addTaskTC","removeTodolistAC","changeTodolistTitleAC","changeTodolistTitleTC","addTodolist","addTodoTC","Grid","padding","tl","allTodolistTasks","Paper","to","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","handleSubmit","FormControl","FormLabel","containerInfo","FormGroup","margin","getFieldProps","FormControlLabel","control","App","finally","Container","fixed","path","element","top","textAlign","CircularProgress","Boolean","window","location","hostname","match","rootReducer","combineReducers","copyState","forEach","el","stateCopy1","stateCopy","newTasks","todoListId","todolistTasks","newTasksArray","stateRoot","addedDate","order","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.fc51d4c7.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"AddItemForm_container__3myM9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"containerInfo\":\"login_containerInfo__2S8OM\"};","import axios, {AxiosResponse} from 'axios'\n\nconst instance = axios.create({\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\n    withCredentials: true,\n    headers: {\n        'API-KEY': '6118ac2e-2c93-48e5-aed5-94f0a20de5d2'\n    }\n})\n\nexport type LoginParamsType = {\n    email: string\n    password: string\n    rememberMe?: boolean\n    captcha?: string\n}\nexport type AuthMeType = {\n    id: number\n    email: string\n    login: string\n\n}\n\nexport const authAPI = {\n    login(data: LoginParamsType) {\n        return instance.post<LoginParamsType, AxiosResponse<ResponseType<{ userId: number }>>>('auth/login', data);\n    },\n    me() {\n        return instance.get<AuthMeType, AxiosResponse<ResponseType>>('/auth/me')\n    },\n    logout() {\n        return instance.delete<ResponseType>('auth/login');\n    },\n}\n\n// api\nexport const todolistsAPI = {\n    getTodolists() {\n        return instance.get<TodolistType[]>('todo-lists');\n    },\n    createTodolist(title: string) {\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TodolistType }>>>('todo-lists', {title});\n    },\n    deleteTodolist(id: string) {\n        return instance.delete<ResponseType>(`todo-lists/${id}`);\n    },\n    updateTodolist(id: string, title: string) {\n        return instance.put<{ title: string }, AxiosResponse<ResponseType>>(`todo-lists/${id}`, {title});\n    },\n    getTasks(todolistId: string) {\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\n    },\n    deleteTask(todolistId: string, taskId: string) {\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\n    },\n    createTask(todolistId: string, title: string) {\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks`, {title});\n    },\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\n        return instance.put<UpdateTaskModelType, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\n    }\n}\n\n// types\nexport type TodolistType = {\n    id: string\n    title: string\n    addedDate: string\n    order: number\n}\nexport type ResponseType<D = {}> = {\n    resultCode: number\n    messages: Array<string>\n    fieldsErrors: Array<string>\n    data: D\n}\n\n\nexport enum TaskStatuses {\n    New = 0,\n    InProgress = 1,\n    Completed = 2,\n    Draft = 3\n}\n\nexport enum TaskPriorities {\n    Low = 0,\n    Middle = 1,\n    Hi = 2,\n    Urgently = 3,\n    Later = 4\n}\n\nexport type TaskType = {\n    description: string\n    title: string\n    status: TaskStatuses\n    priority: TaskPriorities\n    startDate: string\n    deadline: string\n    id: string\n    todoListId: string\n    order: number\n    addedDate: string\n}\nexport type UpdateTaskModelType = {\n    title: string\n    description: string\n    status: TaskStatuses\n    priority: TaskPriorities\n    startDate: string\n    deadline: string\n}\ntype GetTasksResponse = {\n    error: string | null\n    totalCount: number\n    items: TaskType[]\n}\n","import {ResponseType} from \"../../api/todolists-api\";\nimport {Dispatch} from \"redux\";\nimport {setErrorAC, setStatusAC} from \"../../app/app-reducer\";\n\nexport const handleServerAppError = <D> (data: ResponseType<D>, dispatch: Dispatch) =>{\n    if (data.messages.length) {\n        dispatch(setErrorAC(data.messages[0]))\n    } else {\n        dispatch(setErrorAC('Some Error occurred'))\n    }\n    dispatch(setStatusAC('failed'))\n}\n\n// for catch\nexport const handleServerNetworkError = (error: any, dispatch: Dispatch) =>{\n    dispatch(setErrorAC(error.message ? error.message : 'Some Error occurred'))\n    dispatch(setStatusAC('failed'))\n}\n\n","import {Dispatch} from \"redux\";\nimport {AppThunkType} from \"../../redux/store\";\nimport {setStatusAC} from \"../../app/app-reducer\";\nimport {authAPI, LoginParamsType} from \"../../api/todolists-api\";\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/errorUtils/errorUtils\";\n\nconst initialState = {\n    isLoggedIn: false\n}\ntype InitialStateType = {\n    isLoggedIn: boolean\n}\n\nexport type AuthActionsType = SetIsLoggedInType\n\nexport const authReducer = (state: InitialStateType = initialState, action: AuthActionsType): InitialStateType => {\n    switch (action.type) {\n        case 'login/SET-IS-LOGGED-IN':\n\n            return {...state, isLoggedIn: action.value}\n        default:\n            return state\n    }\n}\n\n// actions\nexport const setIsLoggedInAC = (value: boolean) =>\n    ({type: 'login/SET-IS-LOGGED-IN', value} as const)\n\ntype SetIsLoggedInType = ReturnType<typeof setIsLoggedInAC>\n\n// thunk\nexport const loginTC = (data: LoginParamsType): AppThunkType => {\n    return (dispatch: Dispatch) => {\n        dispatch(setStatusAC('loading'))\n        authAPI.login(data)\n            .then((res) => {\n                if (res.data.resultCode === 0) {\n                    dispatch(setIsLoggedInAC(true))\n                    dispatch(setStatusAC('succeeded'))\n                } else {\n                    handleServerAppError(res.data, dispatch)\n                }\n            })\n            .catch((error) => {\n                handleServerNetworkError(error, dispatch)\n            })\n    }\n}\n\nexport const logoutTC = (): AppThunkType => (dispatch: Dispatch) => {\n    dispatch(setStatusAC('loading'))\n    authAPI.logout()\n        .then(res => {\n            if (res.data.resultCode === 0) {\n                dispatch(setIsLoggedInAC(false))\n                dispatch(setStatusAC('succeeded'))\n            } else {\n                handleServerAppError(res.data, dispatch)\n            }\n        })\n        .catch((error) => {\n            handleServerNetworkError(error, dispatch)\n        })\n}\n\n","import {authAPI} from \"../api/todolists-api\";\nimport {Dispatch} from \"redux\";\nimport {setIsLoggedInAC} from \"../features/Login/reducer-auth\";\nimport {handleServerAppError} from \"../utils/errorUtils/errorUtils\";\n\nconst initialState: InitialStateType = {\n    status: 'idle',\n    error: null,\n    isInitialized: false\n}\n\nexport const appReducer = (state: InitialStateType = initialState, action: AppProgressActionsType): InitialStateType => {\n    switch (action.type) {\n        case 'APP/SET-STATUS':\n            return {...state, status: action.status}\n        case 'APP/SET-ERROR':\n            return {...state, error: action.error}\n        case \"APP/SET-IS-INITIALIZE\":\n            return {...state, isInitialized: action.isInitialized}\n        default:\n            return {...state}\n    }\n}\n\nexport const setIsInitializedAC = (isInitialized: boolean) => {\n    return {\n        type: 'APP/SET-IS-INITIALIZE',\n        isInitialized: isInitialized\n    } as const\n}\nexport const setErrorAC = (error: string | null) => {\n    return {\n        type: 'APP/SET-ERROR',\n        error: error\n    } as const\n}\n\nexport const setStatusAC = (status: InitialStateStatusType) => {\n    return {\n        type: 'APP/SET-STATUS',\n        status: status\n    } as const\n}\n\nexport type InitialStateType = {\n    status: InitialStateStatusType\n    error: string | null\n    isInitialized: boolean\n}\n\nexport type InitialStateStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\nexport type AppProgressActionsType = SetErrorType | SetStatusType | SetIsInitializedType\n\nexport type SetErrorType = ReturnType<typeof setErrorAC>\nexport type SetStatusType = ReturnType<typeof setStatusAC>\nexport type SetIsInitializedType = ReturnType<typeof setIsInitializedAC>\n\n\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\n    dispatch(setStatusAC('loading'))\n    authAPI.me().then(res => {\n        if (res.data.resultCode === 0) {\n            dispatch(setIsLoggedInAC(true));\n            dispatch(setStatusAC('succeeded'))\n        } else {\n            handleServerAppError(res.data, dispatch)\n        }\n    })\n        .finally(() => {\n            dispatch(setIsInitializedAC(true))\n        })\n}\n\n\n\n","import React from 'react';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"../redux/store\";\nimport {setErrorAC} from \"../app/app-reducer\";\nimport Stack from '@mui/material/Stack';\nimport Snackbar from '@mui/material/Snackbar';\nimport MuiAlert, { AlertProps } from '@mui/material/Alert';\n\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\n    props,\n    ref,\n) {\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\n});\n\nexport function CustomizedSnackbars() {\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\n    const dispatch = useDispatch()\n    const handleClose = (event?: React.SyntheticEvent | Event, reason?: string) => {\n        if (reason === 'clickaway') {\n            return;\n        }\n        dispatch(setErrorAC(null))\n    };\n\n    return (\n        <Stack spacing={2} sx={{ width: '100%' }}>\n            <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\n                <Alert onClose={handleClose} severity=\"error\" sx={{ width: '100%' }}>\n                    {error}\n                </Alert>\n            </Snackbar>\n        </Stack>\n    );\n}\n","import * as React from 'react';\nimport AppBar from '@mui/material/AppBar';\nimport Box from '@mui/material/Box';\nimport Toolbar from '@mui/material/Toolbar';\nimport Typography from '@mui/material/Typography';\nimport Button from '@mui/material/Button';\nimport {LinearProgress} from \"@mui/material\";\nimport {CustomizedSnackbars} from \"./ErrorSnackBar\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"../redux/store\";\nimport {InitialStateStatusType} from \"../app/app-reducer\";\nimport {logoutTC} from \"../features/Login/reducer-auth\";\n\ntype PropsType = {\n    isLoggedIn: boolean\n}\n\nexport default function ButtonAppBar({isLoggedIn}: PropsType) {\n    const status = useSelector<AppRootStateType, InitialStateStatusType>((state) => state.app.status)\n    const dispatch = useDispatch()\n// useCallback\n    const logoutHandler = () => {\n        dispatch(logoutTC())\n    }\n\n    return (\n        <Box sx={{flexGrow: 1}}>\n            <CustomizedSnackbars/>\n            <AppBar position=\"static\">\n                <Toolbar>\n                    <Typography variant=\"h6\" component=\"div\" sx={{flexGrow: 1}}>\n                        TODOAPP\n                    </Typography>\n                    {isLoggedIn && <Button\n                        onClick={logoutHandler}\n                        color=\"inherit\">Logout</Button>}\n                </Toolbar>\n                {status === 'loading' && <LinearProgress/>}\n            </AppBar>\n        </Box>\n    );\n}\n","import {todolistsAPI, TodolistType} from '../api/todolists-api'\nimport {Dispatch} from \"redux\";\nimport {AppRootStateType, AppThunkType} from \"./store\";\nimport {InitialStateStatusType, setStatusAC} from \"../app/app-reducer\";\nimport {handleServerAppError, handleServerNetworkError} from \"../utils/errorUtils/errorUtils\";\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>\nexport type ChangeTodolistTitleActionType = ReturnType<typeof changeTodolistTitleAC>\nexport type ChangeTodolistFilterActionType = ReturnType<typeof changeTodolistFilterAC>\nexport type SetTodosActionType = ReturnType<typeof setTodosAC>\nexport type ChangeTodolistEntityStatusActionType = ReturnType<typeof changeTodolistEntityStatusAC>\n\nexport type TodolistActionsType =\n    | RemoveTodolistActionType\n    | AddTodolistActionType\n    | ChangeTodolistTitleActionType\n    | ChangeTodolistFilterActionType\n    | SetTodosActionType\n    | ChangeTodolistEntityStatusActionType\n\nconst initialState: Array<TodolistDomainType> = []\n\nexport type FilterValuesType = 'all' | 'active' | 'completed';\nexport type TodolistDomainType = TodolistType & {\n    filter: FilterValuesType\n    entityStatus: InitialStateStatusType\n}\n\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: TodolistActionsType): Array<TodolistDomainType> => {\n    switch (action.type) {\n        case 'SET_TODOS':\n            let stateRoot: Array<TodolistDomainType> = action.todolists.map((tl) => {\n                return {...tl, filter: 'all', entityStatus: 'idle'}\n            })\n            return stateRoot\n        case 'REMOVE-TODOLIST': {\n            return state.filter(tl => tl.id !== action.id)\n        }\n        case 'ADD-TODOLIST': {\n            return [{\n                id: action.todolist.id,\n                title: action.todolist.title,\n                filter: 'all',\n                addedDate: '',\n                order: 0,\n                entityStatus: 'idle'\n            }, ...state]\n        }\n        case 'CHANGE-TODOLIST-TITLE': {\n            const todolist = state.find(tl => tl.id === action.id);\n            if (todolist) {\n                // если нашёлся - изменим ему заголовок\n                todolist.title = action.title;\n            }\n            return [...state]\n        }\n        case 'CHANGE-TODOLIST-FILTER': {\n            const todolist = state.find(tl => tl.id === action.id);\n            if (todolist) {\n                todolist.filter = action.filter;\n            }\n            return [...state]\n        }\n        case \"CHANGE-TODOLIST-ENTITY-STATUS\":\n            return state.map(tl => tl.id === action.id ? {...tl, entityStatus: action.status} : tl)\n        default:\n            return state;\n    }\n}\n\nexport const removeTodolistAC = (todolistId: string) => {\n    return {type: 'REMOVE-TODOLIST', id: todolistId} as const\n}\nexport const addTodolistAC = (todolist: TodolistType) => {\n    return {type: 'ADD-TODOLIST', todolist} as const\n}\nexport const changeTodolistTitleAC = (id: string, title: string) => {\n    return {type: 'CHANGE-TODOLIST-TITLE', id: id, title: title} as const\n}\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType) => {\n    return {type: 'CHANGE-TODOLIST-FILTER', id: id, filter: filter} as const\n}\nexport const setTodosAC = (todolists: Array<TodolistType>) => {\n    return {type: 'SET_TODOS', todolists,} as const\n}\n\nexport const changeTodolistEntityStatusAC = (id: string, status: InitialStateStatusType) => {\n    return {type: 'CHANGE-TODOLIST-ENTITY-STATUS', id: id, status: status} as const\n}\n\n// thunk\n\nexport const setTodosTC = (): AppThunkType => (dispatch: Dispatch, getState: () => AppRootStateType): void => {\n    dispatch(setStatusAC('loading'))\n    // 1.side effects\n    todolistsAPI.getTodolists()\n        .then((res) => {\n            let todos = res.data\n            // 2. dispatch action (thunk)\n            dispatch(setTodosAC(todos))\n            dispatch(setStatusAC('succeeded'))\n        })\n        .catch((error) => {\n            handleServerNetworkError(error, dispatch)\n        })\n}\n\nexport const removeTodoTC = (todolistId: string): AppThunkType => {\n    return (dispatch: Dispatch) => {\n        dispatch(setStatusAC('loading'))\n        dispatch(changeTodolistEntityStatusAC(todolistId, 'loading'))\n        todolistsAPI.deleteTodolist(todolistId)\n            .then(res => {\n                if (res.data.resultCode === 0) {\n                    dispatch(removeTodolistAC(todolistId))\n                    dispatch(setStatusAC('succeeded'))\n                }\n            })\n            .catch((error) => {\n                handleServerNetworkError(error, dispatch)\n            })\n    }\n}\n\nexport const addTodoTC = (title: string): AppThunkType => {\n    return (dispatch: Dispatch) => {\n        dispatch(setStatusAC('loading'))\n        todolistsAPI.createTodolist(title)\n            .then((res) => {\n                if (res.data.resultCode === 0) {\n                    let title = res.data.data.item\n                    dispatch(addTodolistAC(title))\n                    dispatch(setStatusAC('succeeded'))\n                }\n                else {\n                    handleServerAppError(res.data, dispatch)\n                }\n            })\n            .catch((error) => {\n                handleServerNetworkError(error, dispatch)\n            })\n    }\n}\n\nexport const changeTodolistTitleTC = (id: string, title: string): AppThunkType => {\n    return (dispatch: Dispatch) => {\n        todolistsAPI.updateTodolist(id, title)\n            .then((res) => {\n                dispatch(changeTodolistTitleAC(id, title))\n            })\n    }\n}","import {Dispatch} from \"redux\";\nimport {\n    TaskPriorities,\n    TaskStatuses,\n    TaskType,\n    todolistsAPI,\n    UpdateTaskModelType\n} from \"../api/todolists-api\";\nimport {AddTodolistActionType, RemoveTodolistActionType, SetTodosActionType} from \"./reducer-todolist\";\nimport {AppRootStateType, AppThunkType} from \"./store\";\nimport {TasksStateType} from \"../features/TodolistsList/TodolistsList\";\nimport {setStatusAC} from \"../app/app-reducer\";\nimport {handleServerAppError, handleServerNetworkError} from \"../utils/errorUtils/errorUtils\";\n\n\nexport type RemoveTaskActionType = ReturnType<typeof removeTaskAC>\nexport type AddTaskActionType = ReturnType<typeof addTaskAC>\nexport type UpdateTaskActionType = ReturnType<typeof updateTaskAC>\nexport type SetTasksActionType = ReturnType<typeof setTasksAC>\n// export type ChangeTaskTitleActionType = {\n//     type: 'CHANGE-TASK-TITLE',\n//     todolistId: string\n//     taskId: string\n//     title: string\n// }\n\nexport type TasksActionsType = RemoveTaskActionType | AddTaskActionType\n    | UpdateTaskActionType\n    // | ChangeTaskTitleActionType\n    | AddTodolistActionType\n    | RemoveTodolistActionType\n    | SetTodosActionType\n    | SetTasksActionType\n\nconst initialState: TasksStateType = {}\n\nexport const tasksReducer = (state: TasksStateType = initialState, action: TasksActionsType): TasksStateType => {\n    switch (action.type) {\n        case \"SET_TODOS\":\n            const copyState = {...state}\n            action.todolists.forEach((el) => {\n                copyState[el.id] = []\n            })\n            return copyState\n        case 'SET-TASKS': {\n            const stateCopy1 = {...state}\n            stateCopy1[action.todolistId] = action.tasks\n            return stateCopy1\n        }\n        case 'REMOVE-TASK': {\n            const stateCopy = {...state}\n            const tasks = stateCopy[action.todolistId];\n            const newTasks = tasks.filter(t => t.id !== action.taskId);\n            stateCopy[action.todolistId] = newTasks;\n            return stateCopy;\n        }\n        case 'ADD-TASK': {\n            const stateCopy = {...state}\n            const tasks = stateCopy[action.task.todoListId];\n            const newTasks = [action.task, ...tasks];\n            stateCopy[action.task.todoListId] = newTasks;\n            return stateCopy;\n        }\n        case 'UPDATE-TASK': {\n            let todolistTasks = state[action.todolistId];\n            let newTasksArray = todolistTasks\n                .map(t => t.id === action.taskId ? {...t, ...action.model} : t);\n\n            state[action.todolistId] = newTasksArray;\n            return ({...state});\n        }\n        // case 'CHANGE-TASK-TITLE': {\n        //     let todolistTasks = state[action.todolistId];\n        //     // найдём нужную таску:\n        //     let newTasksArray = todolistTasks\n        //         .map(t => t.id === action.taskId ? {...t, title: action.title} : t);\n        //\n        //     state[action.todolistId] = newTasksArray;\n        //     return ({...state});\n        // }\n        case 'ADD-TODOLIST': {\n            return {\n                ...state,\n                [action.todolist.id]: []\n            }\n        }\n        case 'REMOVE-TODOLIST': {\n            const copyState = {...state};\n            delete copyState[action.id];\n            return copyState;\n        }\n        default:\n            return state;\n    }\n}\n\nexport const removeTaskAC = (taskId: string, todolistId: string) => {\n    return {type: 'REMOVE-TASK', taskId: taskId, todolistId: todolistId} as const\n}\nexport const addTaskAC = (task: TaskType) => {\n    return {type: 'ADD-TASK', task} as const\n}\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) => {\n    return {type: 'UPDATE-TASK', model, todolistId, taskId} as const\n}\n// export const changeTaskTitleAC = (taskId: string, title: string, todolistId: string) => {\n//     return {type: 'CHANGE-TASK-TITLE', title, todolistId, taskId} as const\n// }\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) => {\n    return {type: 'SET-TASKS', tasks, todolistId} as const\n}\n\n\n// thunk\nexport const fetchTasksTC = (todolistId: string): AppThunkType => {\n    return (dispatch: Dispatch) => {\n        dispatch(setStatusAC('loading'))\n        todolistsAPI.getTasks(todolistId)\n            .then((res) => {\n                const tasks = res.data.items\n                dispatch(setTasksAC(tasks, todolistId))\n                dispatch(setStatusAC('succeeded'))\n            })\n            .catch((error) => {\n                handleServerNetworkError(error, dispatch)\n            })\n    }\n}\n\nexport const removeTaskTC = (todolistId: string, taskId: string): AppThunkType => {\n    return (dispatch: Dispatch) => {\n        todolistsAPI.deleteTask(todolistId, taskId)\n            .then(res => {\n                if (res.data.resultCode === 0) {\n                    dispatch(removeTaskAC(taskId, todolistId))\n                }\n            })\n            .catch((error) => {\n                handleServerNetworkError(error, dispatch)\n            })\n    }\n}\n\nexport const addTaskTC = (todolistId: string, title: string): AppThunkType => (dispatch: Dispatch) => {\n    dispatch(setStatusAC('loading'))\n    todolistsAPI.createTask(todolistId, title)\n        .then((res) => {\n            if (res.data.resultCode === 0) {\n                let task = res.data.data.item\n                dispatch(addTaskAC(task))\n                dispatch(setStatusAC('succeeded'))\n            } else {\n                handleServerAppError(res.data, dispatch)\n            }\n        })\n        .catch((error) => {\n            handleServerNetworkError(error, dispatch)\n        })\n}\n\nexport type UpdateDomainTaskModelType = {\n    title?: string\n    description?: string\n    status?: TaskStatuses\n    priority?: TaskPriorities\n    startDate?: string\n    deadline?: string\n}\n\n\nexport const updateTaskTC = (todoId: string, taskId: string, domainModal: UpdateDomainTaskModelType): AppThunkType => (dispatch: Dispatch, getState: () => AppRootStateType) => {\n    const appState = getState()\n    const tasksApp = appState.tasks\n    const tasksForCurrentTodo = tasksApp[todoId]\n    const currentTask = tasksForCurrentTodo.find((t) => {\n        return t.id === taskId\n    })\n\n    if (!currentTask) {\n        return\n    }\n    const model: UpdateTaskModelType = {\n        title: currentTask.title,\n        status: currentTask.status,\n        description: currentTask.description,\n        priority: currentTask.priority,\n        startDate: currentTask.startDate,\n        deadline: currentTask.deadline,\n        ...domainModal\n    }\n    todolistsAPI.updateTask(todoId, taskId, model)\n        .then((res) => {\n            if (res.data.resultCode === 0) {\n                dispatch(updateTaskAC(taskId, domainModal, todoId));\n            } else {\n                handleServerAppError(res.data, dispatch)\n            }\n        })\n        .catch((error) => {\n            handleServerNetworkError(error, dispatch)\n        })\n}\n","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\nimport Button from '@mui/material/Button';\nimport TextField from '@mui/material/TextField';\nimport classes from './AddItemForm.module.css';\n\ntype PropsType = {\n    callback: (title: string) => void\n    disabled?: boolean\n}\n\nexport const AddItemForm = React.memo(({disabled = false,...props}: PropsType) => {\n    const [title, setTitle] = useState<string>(\"\")\n    let [error, setError] = useState<string | null>(null)\n\n    const addItem = () => {\n        if (title.trim() !== '') {\n            props.callback(title);\n            setTitle('');\n        } else {\n            setError('Title is required');\n        }\n    }\n\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        setTitle(e.currentTarget.value)\n    }\n\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\n        if (error !== null) {\n            setError(null);\n        }\n        if (e.charCode === 13) {\n            addItem();\n        }\n    }\n\n    return (\n        <div className={classes.container}>\n            <TextField disabled={disabled} id=\"standard-basic\" label=\"Title\" size=\"small\"\n                       variant=\"standard\" value={title} onChange={onChangeHandler}\n                       onKeyPress={onKeyPressHandler} helperText={error} error={!!error}/>\n            <Button variant=\"outlined\" onClick={addItem} disabled={disabled}>Add</Button>\n        </div>\n    )\n})","import React, {useState} from \"react\";\nimport TextField from '@mui/material/TextField';\n\ntype PropsType = {\n    title: string\n    callback: (localTitle: string) => void\n}\n\nexport const EditableSpan = React.memo((props: PropsType) => {\n    let [title, setTitle] = useState(props.title)\n    let [edit, setEdit] = useState(false)\n\n    const editHandler = () => {\n        setEdit(true)\n        setTitle(props.title)\n    }\n    const onBlurHandlerFALSE = () => {\n        setEdit(false)\n        props.callback(title)\n    }\n    const onChangeHandler = (e: React.ChangeEvent<HTMLInputElement>) =>{\n        setTitle(e.currentTarget.value)\n    }\n\n    return (\n            edit\n                ? <TextField\n                    id=\"standard-required\"\n                    variant=\"standard\"\n                    value={title} onChange={onChangeHandler} onBlur={onBlurHandlerFALSE} autoFocus\n                />\n            : <span onDoubleClick={editHandler}>{props.title}</span>\n    )\n})","import React, {ChangeEvent, useCallback} from 'react';\nimport {EditableSpan} from \"../../../../components/EditableSpan\";\nimport IconButton from \"@mui/material/IconButton\";\nimport DeleteIcon from \"@mui/icons-material/Delete\";\nimport {TaskStatuses, TaskType} from \"../../../../api/todolists-api\";\nimport {Checkbox} from \"@mui/material\";\nimport classes from \"./task.module.css\";\n\n\nexport type TaskPropsType = {\n    task: TaskType\n    todolistId: string\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\n    removeTask: (taskId: string, todolistId: string) => void\n}\n\nexport const Task = React.memo(({task, todolistId, changeTaskTitle, removeTask, changeTaskStatus}: TaskPropsType) => {\n    const taskId = task.id\n    const changeStatus = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n        let newIsDoneValue = e.currentTarget.checked\n        changeTaskStatus(taskId, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, todolistId)\n    }, [taskId, todolistId, changeTaskStatus]);\n\n    const callbackHandlerSpan = useCallback((newValue: string) => {\n        changeTaskTitle(taskId, newValue, todolistId)\n    }, [taskId, todolistId, changeTaskTitle]);\n\n    const removeTaskHandler = useCallback(() => removeTask(taskId, todolistId), [taskId, todolistId, removeTask]);\n\n    return (\n        <div key={taskId} className={classes.containerTask}>\n            <div>\n                <Checkbox checked={task.status === TaskStatuses.Completed}\n                          onChange={changeStatus}\n                />\n                <EditableSpan title={task.title} callback={callbackHandlerSpan}/>\n            </div>\n            <IconButton\n                className={classes.iconButtonDelete}\n                aria-label=\"delete\"\n                size=\"small\"\n                onClick={removeTaskHandler}\n            >\n                <DeleteIcon fontSize=\"inherit\"/>\n            </IconButton>\n        </div>\n    )\n})","import React, {useCallback, useEffect} from \"react\";\nimport '../../../app/App.css';\nimport {AddItemForm} from \"../../../components/AddItemForm\";\nimport {EditableSpan} from \"../../../components/EditableSpan\";\nimport IconButton from '@mui/material/IconButton';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport Button from '@mui/material/Button';\nimport {useDispatch} from \"react-redux\";\nimport {Task} from \"./Task/Task\";\nimport {TaskStatuses, TaskType} from \"../../../api/todolists-api\";\nimport {FilterValuesType, TodolistDomainType} from \"../../../redux/reducer-todolist\";\nimport {fetchTasksTC} from \"../../../redux/reducer-tasks\";\n\ntype PropsType = {\n    todolist: TodolistDomainType\n    tasks: Array<TaskType>\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\n    addTask: (title: string, todolistId: string) => void\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\n    removeTask: (taskId: string, todolistId: string) => void\n    removeTodolist: (id: string) => void\n    changeTodolistTitle: (id: string, newTitle: string) => void\n    demo?: boolean\n}\n\nexport function Todolist({\n                             demo = false,\n                             todolist,\n                             tasks,\n                             addTask,\n                             changeFilter,\n                             changeTodolistTitle,\n                             ...props\n                         }: PropsType) {\n    const dispatch = useDispatch()\n    useEffect(() => {\n        // if (demo) {\n        //     return\n        // }\n        dispatch(fetchTasksTC(todolist.id))\n\n    }, [dispatch, todolist.id])\n\n    const setAll = useCallback(() => changeFilter('all', todolist.id), [todolist.id, changeFilter])\n    const setActive = useCallback(() => changeFilter('active', todolist.id), [todolist.id, changeFilter])\n    const setCompleted = useCallback(() => changeFilter('completed', todolist.id), [todolist.id, changeFilter])\n\n    let tasksForTodolist = tasks\n    if (todolist.filter === \"active\") {\n        tasksForTodolist = tasks.filter(t => t.status === TaskStatuses.New)\n    }\n    if (todolist.filter === \"completed\") {\n        tasksForTodolist = tasks.filter(t => t.status === TaskStatuses.Completed)\n    }\n\n    const callbackAddTaskHandler = useCallback((title: string) => {\n        addTask(title, todolist.id)\n    }, [addTask, todolist.id])\n\n    const callbackTitleTodoListHandler = useCallback((title: string) => {\n        changeTodolistTitle(todolist.id, title)\n    }, [todolist.id, changeTodolistTitle])\n\n    const removeTodolist = () => {\n        props.removeTodolist(todolist.id)\n    }\n\n    return (\n        <div>\n            <div style={{display: 'flex', justifyContent: 'space-between', alignItems: 'center'}}>\n                <EditableSpan title={todolist.title} callback={callbackTitleTodoListHandler}/>\n                <IconButton size=\"small\" aria-label=\"delete\"\n                            onClick={removeTodolist}\n                            disabled={todolist.entityStatus === 'loading'}>\n                    <DeleteIcon/>\n                </IconButton>\n            </div>\n            <AddItemForm callback={callbackAddTaskHandler}\n                         disabled={todolist.entityStatus === 'loading'}/>\n            <div style={{minHeight: '20px'}}>\n                {tasksForTodolist?.map(elem => {\n                    return <Task\n                        key={elem.id} task={elem} todolistId={todolist.id}\n                        removeTask={props.removeTask}\n                        changeTaskTitle={props.changeTaskTitle}\n                        changeTaskStatus={props.changeTaskStatus}\n                    />\n                })\n                }\n            </div>\n            {\n                tasks.length > 0\n                    ? <div>\n                        <Button variant={todolist.filter === \"all\" ? \"contained\" : \"outlined\"} size=\"small\"\n                                onClick={setAll}\n                                style={{marginRight: '7px'}}>All</Button>\n                        <Button style={{marginRight: '7px'}}\n                                variant={todolist.filter === \"active\" ? \"contained\" : \"outlined\"} size=\"small\"\n                                onClick={setActive}>Active</Button>\n                        <Button variant={todolist.filter === \"completed\" ? \"contained\" : \"outlined\"} size=\"small\"\n                                onClick={setCompleted}>Completed</Button>\n                    </div>\n                    : <></>\n            }\n        </div>\n    );\n}\n\n","import React, {useCallback, useEffect} from 'react';\nimport {\n    addTodoTC,\n    changeTodolistFilterAC, changeTodolistTitleTC,\n    FilterValuesType,\n    removeTodoTC,\n    setTodosTC,\n    TodolistDomainType\n} from \"../../redux/reducer-todolist\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"../../redux/store\";\nimport {addTaskTC, removeTaskTC, updateTaskTC} from \"../../redux/reducer-tasks\";\nimport {TaskStatuses, TaskType} from \"../../api/todolists-api\";\nimport {Grid, Paper} from \"@mui/material\";\nimport {AddItemForm} from \"../../components/AddItemForm\";\nimport {Todolist} from \"./Todolist/Todolist\";\nimport {Navigate} from 'react-router-dom';\n\nexport type TasksStateType = {\n    [key: string]: Array<TaskType>\n}\n\ntype PropsType = {\n    demo?: boolean\n}\n\nexport const TodolistsList = ({demo = false}: PropsType) => {\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\n    const stateTodolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\n    const dispatch = useDispatch()\n\n    useEffect(() => {\n        if (!isLoggedIn) {\n            return\n        }\n        dispatch(setTodosTC())\n    }, [dispatch, isLoggedIn])\n\n    const removeTask = useCallback(function (id: string, todolistId: string) {\n        dispatch(removeTaskTC(todolistId, id));\n    }, [dispatch]);\n\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\n        const action = changeTodolistFilterAC(todolistId, value);\n        dispatch(action);\n    }, [dispatch]);\n\n    const addTask = useCallback(function (title: string, todolistId: string) {\n        dispatch(addTaskTC(todolistId, title));\n    }, [dispatch]);\n\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\n        // const action = changeTaskStatusAC(id, status, todolistId);\n        dispatch(updateTaskTC(todolistId, id, {status}));\n    }, [dispatch]);\n\n    const removeTodolist = useCallback(function (id: string) {\n        dispatch(removeTodoTC(id));\n    }, [dispatch]);\n\n    const changeTaskTitle = useCallback(function (id: string, title: string, todolistId: string) {\n        // const action = changeTaskTitleAC(id, newTitle, todolistId);\n        // dispatch(changeTaskTitleAC(id, title, todolistId));\n        dispatch(updateTaskTC(todolistId, id, {title}));\n\n    }, [dispatch]);\n\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\n        // const action = changeTodolistTitleAC(id, title);\n        // dispatch(action);\n        dispatch(changeTodolistTitleTC(id, title))\n    }, [dispatch]);\n\n\n    const addTodolist = useCallback((title: string) => {\n        dispatch(addTodoTC(title));\n    }, [dispatch]);\n\n\n    if (!isLoggedIn) {\n        return <Navigate to={'/login'}/>\n    }\n\n    return (\n        <>\n            <Grid container style={{padding: \"15px\"}}>\n                <AddItemForm callback={addTodolist}/>\n            </Grid>\n            <Grid container spacing={2}>\n                {stateTodolists.map(tl => {\n                    let allTodolistTasks = tasks[tl.id];\n                    return (\n                        <Grid item key={tl.id}>\n                            <Paper style={{padding: \"10px\"}}>\n                                <Todolist\n                                    todolist={tl}\n                                    tasks={allTodolistTasks}\n                                    removeTask={removeTask}\n                                    changeFilter={changeFilter}\n                                    addTask={addTask}\n                                    changeTaskStatus={changeStatus}\n                                    removeTodolist={removeTodolist}\n                                    changeTaskTitle={changeTaskTitle}\n                                    changeTodolistTitle={changeTodolistTitle}\n                                    demo={demo}\n                                />\n                            </Paper>\n                        </Grid>\n                    )\n                })}\n            </Grid>\n        </>\n    )\n}","import React from 'react'\nimport Grid from '@mui/material/Grid';\nimport Checkbox from '@mui/material/Checkbox';\nimport FormControl from '@mui/material/FormControl';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport FormGroup from '@mui/material/FormGroup';\nimport FormLabel from '@mui/material/FormLabel';\nimport TextField from '@mui/material/TextField';\nimport Button from '@mui/material/Button';\nimport {useFormik} from \"formik\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {loginTC} from \"./reducer-auth\";\nimport {AppRootStateType} from \"../../redux/store\";\nimport { Navigate } from \"react-router-dom\"\nimport {LoginParamsType} from \"../../api/todolists-api\";\nimport classes from './login.module.css';\n\n\n// было заменено на Partial - необязательные значения в типизации TS\n// Omit - убрать значения, которые не нужны в типизации TS\n// Pick - выбрать значения, которые нужны в типизации TS\n// type FormikErrorType = {\n//     email?: string\n//     password?: string\n//     rememberMe?: boolean\n// }\n\n\nexport const Login = () => {\n    const dispatch = useDispatch()\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\n\n    const formik = useFormik({\n        initialValues: {\n            email: '',\n            password: '',\n            rememberMe: false\n        },\n        validate: (values) => {\n            const errors: Partial<Omit<LoginParamsType, 'captcha'>> = {\n\n            };\n            if (!values.email) {\n                errors.email = 'Required';\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n                errors.email = 'Invalid email address';\n            }\n            if (!values.password) {\n                errors.password = 'Required';\n            } else if( values.password.length < 3) {\n                errors.password = 'more 3'\n            }\n            return errors;\n        },\n        onSubmit: values => {\n            // alert('jk')\n            // debugger\n            dispatch(loginTC(values))\n\n            // alert(JSON.stringify(values));\n        },\n    })\n\n    if (isLoggedIn) {\n        return <Navigate to={'/'}/>\n    }\n\n    return <Grid container justifyContent={'center'}>\n        <Grid item justifyContent={'center'}>\n            <form onSubmit={formik.handleSubmit}>\n                <FormControl>\n                    <FormLabel className={classes.containerInfo}>\n                        <p>To log in use common test account credentials:</p>\n                        <p>Email: free@samuraijs.com</p>\n                        <p>Password: free</p>\n                    </FormLabel>\n                    <FormGroup>\n                        <TextField label=\"Email\" margin=\"normal\"\n                                   {...formik.getFieldProps('email')}/>\n                        {formik.errors.email ? <div style={{color: 'red'}}>{formik.errors.email}</div> : null}\n                        <TextField type=\"password\" label=\"Password\"\n                                   margin=\"normal\"\n                                   {...formik.getFieldProps('password')}/>\n                        {formik.errors.password ? <div style={{color: 'red'}}>{formik.errors.password}</div> : null}\n                        <FormControlLabel label={'Remember me'} control={<Checkbox\n                            {...formik.getFieldProps('rememberMe')}/>}\n                                          checked={formik.values.rememberMe}\n                        />\n\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>\n                            Login\n                        </Button>\n                    </FormGroup>\n                </FormControl>\n            </form>\n        </Grid>\n    </Grid>\n}\n","import React, {useEffect} from 'react';\r\nimport './App.css';\r\nimport ButtonAppBar from \"../components/AppBar\";\r\nimport {CircularProgress, Container} from \"@mui/material\";\r\nimport {TodolistsList} from \"../features/TodolistsList/TodolistsList\";\r\nimport {Login} from \"../features/Login/Login\";\r\nimport { Routes, Route } from \"react-router-dom\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {initializeAppTC} from \"./app-reducer\";\r\nimport {AppRootStateType} from \"../redux/store\";\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nfunction App({demo = false}: PropsType) {\r\n    const dispatch = useDispatch()\r\n    const isInitialized = useSelector<AppRootStateType, boolean>(state => state.app.isInitialized)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n\r\n    useEffect(() =>{\r\n        dispatch(initializeAppTC())\r\n    }, [dispatch]) // ???\r\n\r\n    if(!isInitialized){\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ButtonAppBar isLoggedIn={isLoggedIn}/>\r\n            <Container fixed>\r\n                <Routes>\r\n                    <Route path='/' element={<TodolistsList demo={demo}/>}/>\r\n                    <Route path='/login' element={<Login/>}/>\r\n                    <Route path=\"*\" element={<h1>404: PAGE NOT FOUND</h1>}/>\r\n                </Routes>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {TodolistActionsType, todolistsReducer} from \"./reducer-todolist\";\nimport {applyMiddleware, combineReducers, createStore} from \"redux\";\nimport thunk, {ThunkAction} from \"redux-thunk\";\nimport {TasksActionsType, tasksReducer} from \"./reducer-tasks\";\nimport {AppProgressActionsType, appReducer} from \"../app/app-reducer\";\nimport {AuthActionsType, authReducer} from \"../features/Login/reducer-auth\";\n\nconst rootReducer = combineReducers({\n    tasks: tasksReducer,\n    todolists: todolistsReducer,\n    app: appReducer,\n    auth: authReducer,\n})\n\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\n\nexport type AppRootStateType = ReturnType<typeof rootReducer>\n\n// все типы экшенов для App\nexport type AppActionsType = TodolistActionsType | TasksActionsType | AppProgressActionsType | AuthActionsType\n\nexport type AppThunkType<ReturnType = void> = ThunkAction<ReturnType, AppRootStateType, unknown, AppActionsType>\n\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\n// @ts-ignore\nwindow.store = store;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './app/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./redux/store\";\r\nimport {HashRouter} from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n    <HashRouter>\r\n        <Provider store={store}>\r\n            <App/>\r\n        </Provider>\r\n    </HashRouter>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"containerTask\":\"task_containerTask__3hEHc\"};"],"sourceRoot":""}